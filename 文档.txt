计算机进制

一、 二进制转十进制
    首先对二进制进行补位， 然后看其首位， 若首位是 "0" 表示为正数， 反之首位是 "1" 表示为负数;

    1 ) 正整数转换

       算法: n位的二进制, 从右往左开始计算，第一位 * 2^0 + 第二位 * 2^1 + 第三位 * 2^2 + ... + 第n位 * 2^(n-1) ;

        示例: 将一个八位的二进制 1011000 转换为十进制

	补位  0101 1000
	-------------------------------------------------------------------
	            0       1      0      1     1     0     0     0
	-------------------------------------------------------------------
	换算	   2^7     2^6    2^5    2^4   2^3   2^2   2^1   2^0
	-------------------------------------------------------------------
	计算	  0*128 + 1*64 + 0*32 + 1*16 + 1*8 + 0*4 + 0*2 + 0*1
	-------------------------------------------------------------------
	结果	  0 + 64 + 0 + 16 + 8 = 88
    2）负整数转换

        算法: 先补位，再对二进制进行取反加一, 然后再做正整数换算;

        示例: 将八位的二进制 10111110 转换为十进制

	  补位  1011 1110
	--------------------------------------------------------------------
	            1       0      1      1     1     1     1     0
	--------------------------------------------------------------------
	取反        0       1      0      0     0     0     0     1
	--------------------------------------------------------------------
	加一        0       1      0      0     0     0     1     0
	--------------------------------------------------------------------
	换算	   2^7     2^6    2^5    2^4   2^3   2^2   2^1   2^0
	--------------------------------------------------------------------
	计算	  0*128 + 1*64 + 0*32 + 0*16 + 0*8 + 0*4 + 1*2 + 0*1
	--------------------------------------------------------------------
	结果	  0 + 64 + 0 + 0 + 0 + 0 + 2 + 0 = 66
	--------------------------------------------------------------------
	首位为1 结果取反  =====> -66

 
二、 十进制转二进制
    首先看数值正负, 若正数决定首位为 "0" , 反之负数决定首位为 "1";

    1 ) 正整数转换

    算法: 对数值除2取余, 将商递归除2操作, 再将余数顺序取反, 得到二进制值;

    示例: 将十进制 66 转换为八位二进制

	除        66/2     33/2     16/2     8/2     4/2     2/2     1/2     0
	--------------------------------------------------------------------------
	取余            0        1        0       0       0       0       1
 	--------------------------------------------------------------------------
	顺序取反    1 0 0 0 0 1 0
	--------------------------------------------------------------------------
	结果    0100 0010

    2)负整数转换

    算法: 先做正整数换算, 然后对结果进行取反加一;

    示例: 将十进制 -88 转换为八位二进制

	除        88/2     44/2     22/2     11/2     5/2     2/2     1/2     0
	--------------------------------------------------------------------------
	取余            0        0        0       1       1       0       1
 	--------------------------------------------------------------------------
	顺序取反    1 0 1 1 0 0 0
	--------------------------------------------------------------------------
	补位      0 1 0 1 1 0 0 0
	--------------------------------------------------------------------------
	取反      1 0 1 0 0 1 1 1
	--------------------------------------------------------------------------
	加一      1 0 1 0 1 0 0 0
	--------------------------------------------------------------------------
	结果	1010 1000
	
	

	
位运算符

 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 | <<  |  左位移   |  一个数转为二进制,向左移动n位,后面用0补齐 (即:数*n个2)      |  9 << 3 = 1001 << 3 = 1001 000 = 72 |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 | >>  |   右位移  |  一个数转为二进制,向右移动n位,前面补0(首位不动、且最小0)    |  9 >> 3 = 1001 >> 3 = 0001 = 1      |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 | >>> |  无符右移 |  一个数转为二进制,忽略首位符号位,向右移动n位,空位都以0补齐  |  9 >>> 3 = 1001 >> 3 = 0001 = 1     |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 |  |  |   位或    |  两个数转为二进制,从高位开始比较,如有一个为1则为1,否则为0   |  9 | 12 = 1001 | 1100 = 1101 = 13   |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 |  &  |   位与    |  两个数转为二进制,从高位开始比较,如都为1则为1,否则为0       |  9 & 12 = 1001 & 1100 = 1000 = 8    |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 |  ^  |  位异或   |  两个数转为二进制,从高位开始比较,如相同则为0,不相同则为1    |  9 ^ 12 = 1001 ^ 1100 = 0101 = 5    |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 |  ~  |    位非   |  一个数转为二进制,如果位为0,结果是1,如果位为1,结果是0       |  ~ 9 = ~ 1001 = 0110 = 6            |
 + - - + - - - - — + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - +
 
 
内存单位
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|  单位   |    进制     |  描述                                         |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|  bit    |  最小单位   |  一个bit只有两种状态 0 或者 1, 俗称二进制数据 |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|  Byte   |  8个 bit    |  8个bit构成一个Byte字节                       |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|   KB    |  1024 Byte  |  1KB = 1024 Byte                              |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|   MB    |  1024 KB    |  1MB = 1024 KB                                |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +
	|   GB    |  1024 MB    |  1GB = 1024 MB                                |
	+ - - - - + - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - +	
	
	
	
	
	
	

计算机网络


IP
	+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
	|	IPv4(Internet Protocol Version 4) 网络协议第4版																											|
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|           |           地址区间          |                          区分                         |                保留地址                 |    使用群体   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  A类地址  |  1.0.0.1-126.155.255.254    |  1[00000001] - 126[0111111] 第一个字节固定0开头       |  10.X.X.X、127.X.X.X                    |  政府(公用)   | 
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  B类地址  |  128.0.0.1-191.255.255.254  |  128[10000000] - 191[10111111] 第一个字节固定10开头   |  172.16.X.X - 172.31.X.X、169.254.X.X   |  企业(商用)   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  C类地址  |  192.0.0.1-223.255.255.254  |  192[11000000] - 223[11011111] 第一个字节固定110开头  |  192.168.X.X                            |  个人(民用)   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  D类地址  |  224.0.0.1-239.255.255.254  |  224[11100000] - 239[11101111] 第一个字节固定1110开头 |                                         |  组播(中转站) |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  E类地址  |  240.0.0.1-255.255.255.254  |  240[11110000] - 255[11111111] 第一个字节固定1111开头 |                                         |  实验         |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	
	
网络层
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|              |             功能                  |                  协议                       | 
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    应用层    |   文件传输、电子邮件、虚拟终端    |        HTTP、FTP、DNS、SMTP、Telnet         | 
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    表示层    |  数据格式化、代码转换、数据加密   |             ASCII、JPEG、MPEG               |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    会话层    |    解除和建立与其它接点的联系     |                 SQL、RPC                    |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    传输层    |         提供端对端接口            |                 TCP、UDP                    |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    网络层    |        为数据包选择路由           |            IP、IGMP、ICMP、BGP              |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|  数据链路层  |    传输有地址的帧、错误检测       |            PPP、SLIP、MTU、ARP              |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	|    物理层    |    二进制数据物理媒体上传输	   |        ISO2110、IEEE802、IEEE802.2          |
	+- - - - - - - + - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - +
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	
Java
	---------------------------------------------------------------------------------------------------------------
	Eclipse插件
		--------------------------------------------------------------------------
		主题		Dark Theme			Eclipse Marktplace 搜索 Dark Theme
		--------------------------------------------------------------------------
		spring		Spring Tool			Eclipse Marktplace 搜索 spring
		--------------------------------------------------------------------------
		mybatis		MyBatipse			http://dl.bintray.com/harawata/eclipse
										Eclipse Marktplace 搜索 MyBatipse
		--------------------------------------------------------------------------
		属性文件	Properties Editor	Eclipse Marktplace 搜索Properties Editor
		--------------------------------------------------------------------------
	   堆转储快照	Memory Analyzer		Eclipse Marktplace 搜索Memory
		--------------------------------------------------------------------------
		代码扫描	AliFindBug			https://p3c.alibaba.com/plugin/eclipse/update
		--------------------------------------------------------------------------
		debug工具	JRebel				Eclipse Marktplace 搜索 JRebel
			激活:
				jrebel server: http://139.199.89.239:1008/88414687-3b91-4286-89ba-2dc813b107ce
		--------------------------------------------------------------------------
		找bug		SpotBug				Eclipse Marktplace 搜索 SpotBug
	---------------------------------------------------------------------------------------------------------------
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	引用类型定义: 强引用 > 软引用 > 弱引用 > 虚引用
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		强引用（StrongReference）[默认]:
			具有强引用的对象,垃圾回收器绝不会回收它; 就算内存空间不足,JVM宁愿抛出OutOfMemoryError,也不会回收强引用的对象来解决内存不足.
			
		软引用（SoftReference）:
			具有软引用的对象,内存空间足够的情况下,垃圾回收器不会回收它; 当内存空间接近临界值、JVM即将抛出OutOfMemoryError, 垃圾回收器才会将该引用对象进行回收.
			软引用可以和一个引用队列（ReferenceQueue）联合使用, 如果软引用所引用的对象被垃圾回收器回收, JVM 会将这个软引用加入到与之关联的引用队列中.
			
		弱引用（WeakReference）:
			具有弱引用的对象, 当垃圾回收器扫描到弱引用的对象, 不管内存空间是否足够, 都会直接被垃圾回收器回收;
			由于垃圾回收器是一个优先级很低的线程, 因此不一定会很快发现那些弱引用的对象.
			弱引用也可以和一个引用队列（ReferenceQueue）联合使用, 如果弱引用所引用的对象被垃圾回收, JVM 会将这个弱引用加入到与之关联的引用队列中.
		
		虚引用（PhantomReference）:
			具有虚引用的对象, 那么它就和没有任何引用一样, 在任何时候都可能被垃圾回收器回收.
			虚引用主要用来跟踪对象被垃圾回收器回收的活动, 虚引用必须和引用队列 （ReferenceQueue）联合使用;
			当垃圾回收器准备回收一个对象时,如果发现它还有虚引用,就会在回收对象的内存之前,把这个虚引用加入到与之关联的引用队列中.
		
		例外: 
			主动将对象指向为空; 局部变量方法指向结束后
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	

	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	线程池(ThreadTool)
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	  队列: 阻塞式[BlockingQueue]在入队满或出队空出现等待; 非阻塞式[ConcurrentLinkedQueue],在入队满出现失败或出队空直接空;
		BlockingQueue: 常用实现 ArrayBlockingQueue、  ;  使用需要设置超时时间;
	
	  降低资源消耗(重复利用机制, 降低创建和销毁时间), 提高响应效率(任务到达时, 可以直接执行), 方便管理线程
	  创建线程的方式: 
		缓存线程池: Executors.newCachedThreadPool();
		定长线程池: Executors.newFixedThreadPool(3);// 
		可定时线程池, 指定核心线程数: Executors.newScheduledThreadPool(3);
		单线程线程池: Executors.newSingleThreadExecutor(); 
	    Executors 底层实现是基于ThreadPoolExecutor的构造进行封装;
		  corePoolSize: 核心线程数, 实际运行线程数
		  maximumPoolSize: 最大线程数, 最多可创建线程数
		  keepAliveTime: 非核心线程闲置存活的最大时间
		  
		                                             
	  线程池运行流程: 用户提交线程 -> <判断当前线程数> -> <判断缓存队列满否> -> <判断最大线程数> -> 拒绝任务(并且报错)
		                                     |                    |                     |
		                              不大于核心线程数          未 满             大于当前线程数
									         |                    |                     |
                                        创建线程执行   存放到LinkedBlockingQueue   创建线程执行
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------								
	锁(Lock)
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	  重入锁: Synchronized、 ReentrantLock
		Lock(轻量级)与 synchronized(重量级): Lock 自控制开启锁和释放锁 灵活性更高; 都属可重入锁(递归锁[外层函数获取到锁, 内层函数不需重新获取, 避免产生死锁]); 
	  读写锁: ReentrantReadWriteLock; 多个线程可以同时读一个资源, 若有一个线程写入资源, 其它线程不可读写;  即: 读-读可共存, 读-写不可共存, 写-写不可共存;
	  
	  乐观锁: 本质上没有锁, 效率高 无堵塞 无等待、重试; 在数据库表中, 添加一个version字段, 在每次对数据进行修改时把version字段作为条件, 并且修改version字段;
	  悲观锁: Synchronized、ReentrantLock, 在每次读资源, 都认为有线程在写资源, 都会上锁;
	  
	  CAS无锁机制: Compare and Swap 比较并交换; 包含三个参数(V, E, N), V表示需要更新的变量(主内存), E表示预期值(本地内存), N表示新值(新的值);
		仅当 V(主内存)值 == E(本地内存)值, 才将 V(主内存)的值设为 N(新的值), 
		如果 V(主内存)值 != E(本地内存)值, 则说明已经有其它线程做了更新, 当前线程重新刷新主内存值, 循环比较;
		缺点: ABA问题, 比如变量V初次读取值是A,并且赋值前检查仍是A,不可保证值在期间没有被改变; 可以在期间被改为B, 然后又改回A, CAS会认为没有被修改过; AtomicStampedReference
		
	  AQS (Lock的实现, AbstractQueuedSynchronizer): 基于FIFO等待队列的阻塞锁
		  公平锁: FIFO顺序方式分配锁给予线程
		非公平锁: 随机方式分配锁给予线程
			synchronized 默认是非公平锁实现, 无法改变;
			ReentrantLock 默认是非公平锁实现, 可以选择性改变
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	LCN 分布式事务
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	  非本地事务, 跨服务通讯事务; 根据跨jdbc连接区分分布式事务;
	  分布式事务解决方案:
		jta + automatic 适合单项目多数据源
		消息中间件MQ 底层base理论 柔性事务 CPA理论
		2pc(两段提交协议) 3pc(三段提交协议)
		TCC补偿 GTS
		LCN解决分布式事务
		
		CAP理论:
		  consistency(数据一致性): 如果系统一个写操作成功, 之后所有的读请求必须读到新数据; 否则反之;
		  availability(服务可用性): 所有读写请求在一定时间内得到响应, 可终止、不会一直等待;
		  partition-tolerance(分区容错性): 在网络分区的情况下, 被分隔的节点仍能正常对外服务;
		  
		BASE理论
		  Basically Available(基本可用): 出现不可预知故障的时候, 允许损失部分可用性, 绝不等价于系统完全不可用;
		  Soft state(软状态): 允许数据存在中间状态, 并认为中间状态的存在不会影响系统整体的可以性; 
		  Eventually consistent(最终一致性): 需要系统保证最终数据能够达到一致, 而不需要实时保证系统数据强一致;
		  
		XA接口、JTA、2PC
		  XA接口: X/Open组织提出的分布式事务的规范; 定义了(全局)事务管理器和(局部)资源管理器之间的接口;
		  JTA: 基于XA接口(javax.sql.XAConnection、XADataSource)实现分布式事务管理;
		  2PC(两段提交协议): 分两个阶段
			第一阶段(准备): 事务协调者向所有事务参与者发送事务执行请求; 参与者执行事务不提交; 参与者反馈执行结果给协调者,并阻塞;
			第二阶段(提交): 若协调者收到的所有结果都是执行成功, 协调者通知所有参与者提交事务; 否则存在执行失败或者等待超时, 通知回滚;
	  
	  LCN原理:
		包含事务发起方、事务参与方、事务协调者;
		1. 创建事务组; 事务发起方执行业务之前调用TxManager创建事务组; 拿到GroupId;  远程调用事务参与者会将groupId传递给事务参与者;
		2. 添加事务组; 参与方在执行完业务方法后, 将该模块的事务信息通知给TxManager;
		3. 关闭事务组; 发起方执行完业务代码后;将发起方执行结果状态通知给TxManager; TxManager根据事务组信息同时所有参与模块提交或回滚事务;
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	解决跨域
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	  jsonp: 只能支持get请求
	  后端HttpClient转发: 效率会降低
	  设置响应头: responseHeader 设置 Access-Control-Allow-Origin:*
	  使用Nginx搭建网关: 在nginx.cnf 中的一个server中配置多 location 代理不同的服务器
	  使用Zuul搭建网关: 在Zuul工程的application.yml中 zuul.routes 配置多个工程
	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	
	AOP: 
		关注点(重复代码), 切面(关注点形成的类), 切入点(执行目标); 
		通过代理实现;
		
		cglib 与 jdk 动态代理
		 jdk动态代理: 需要通过接口方式, 基于反射机制实现; 
		 cglib: 可以通过子类方式, 基于ASM字节码
		
	

	Tomcat
	架构 : 	一个Tomcat 中包含 一个Server; 
			一个Server 中包含 一组Service;
			一个Service 中包含 一个Engine 和一组Connector;
			一个Engine 中包含一组Host;
			一个Host 中包含一组Context;
			一个Context 中包含一组Wrapper;
			一个Wrapper 对应一个Servlet;
			一个Context 对应一个war 工程;
			
			
			
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Hystrix
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		微服务中的服务保护框架, 在分布式中的容错框架.
		服务雪崩效应: 当一个服务受到高并发的请求,  服务器承受不了的情况下 `产生服务堆积, 导致其它服务不可用.
		
		作用: 服务保护(保护服务请求堆积, 避免服务瘫痪), 
		解决方案: 
			隔离[目的: 不同服务,互不影响; 方案: 线程池(每个服务独立线程池,CPU内存开销大)、信号量(限制服务同时访问量)];
			降级[目的: 服务不可用,减少等待, 返回友好提示, 提高用户体验; ];
			熔断[目的: 服务达到最大承受能力, 拒绝访问服务, 调用服务降级的方法; 与降级一起使用].
			限流[目的：保护服务; 方案: 计数器、令牌桶、漏桶、Nginx]
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	


	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	高并发限流
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
		计数器方式:  定义一个原子类, 针对某个服务做访问次数记录, 一旦达到设定阈值, 走服务降级;
		
			计数器临界问题:
			
				例如: 限制服务每60秒内只能接受10个请求, 超过10个请求拒绝访问服务 10R/m
			
										 5R          5R↑
				|-------------------------|-----|-----|-------------------------|
				0s						 50s   60s   70s					  120s
		
			滑动窗口计数器: 创建独立格子, 每个格子都是独立的计数器;
		令牌桶算法: 1. 固定速率往桶中存入令牌; 2.客户端想访问, 需先从桶中获取令牌. 可用guava
		漏桶算法: 固定速率从桶流出水滴, 以任意速率往桶流入水滴; 桶容量固定不会发生改变; (流入: 请求的访问量, 当容量固定的桶装满后, 多余流入全部溢出) 
			
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	安全平台设计
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 Web常见攻击: XSS、SQL注入、防盗链、CSRF、上传漏洞
		XSS: 脚本语言攻击(javascript), 浏览器提交script, 将提交的script再到浏览器展示时, 会当做脚本攻击;
		解决方案: 使用过滤器(filter)对关键字符转义处理; 可使用 commons-lang.jar.StringEscapeUtils.ecapeHtml();

		SQL注入: 客户端提交一些特殊的参数, 直接交于SQL拼接; 解决方案: mybatis使用 # 代替 $ .
		
		防盗链: 其它网站盗用本网站文件; 解决方案: 使用http请求头Referer字段判断访问来源.
		
		CSRF: 跨站请求伪造, 模拟请求、机器访问; 解决方案: token令牌授权、图形验证码
		token令牌授权: 提供一个获取token(存入redis)的接口, 在表单提交前获取一个token, 提交表单把token放入请求头;
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																						2018年8月7日15:23:28
																																						

	
		
		
	

	
中间件

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Nginx
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 外网映射: 将本地服务映射到外网访问, 工具: NetApp、ngrok
	 正向代理: 隐藏客户端真实IP地址;
	 反向代理: 提高安全性, 隐藏服务器真实地址;
	 
	 作用: http服务器、反向代理、负载均衡、虚拟主机
	 目录结构:
		nginx-*
		  ├─ conf 配置文件
		  │    └─ nginx.conf 
		  ├─ docs 文档
		  ├─ html 静态资源
		  ├─ logs 日志
		  └─ nginx.exe 启动文件
		  
	 nginx.conf 配置:
		http {   ## http 配置
		  server { ## 服务配置
			listen       8080;  ## 监听8080端口
			server_name  localhost; ## 服务主机名称, 配置域名
			location / { ## 支持访问路径
			  root   html; ## 访问html目录; 与proxy_pass不同时存在 
			  #proxy_pass http://xx.xx.com:80;  ##反向代理配置; 与root配置不同时存在
              index  index.html index.htm; ##默认界面名称
			}
		  }
		}
	 不同域名代理不同项目(二级域名): 配置多个server, 通过server_name配置不同域名;
	 相同域名代理不同项目(统一域名): 配置多个location, 通过配置不同的项目名匹配.
	 
	 location[匹配地址] 表达式配置
			 / : 通用匹配
		前缀 = ：精准匹配;  =/ 表示只可匹配/
		前缀 ~ : 区分大小写匹配
		前缀 ~*: 不区分大小写匹配
		前缀 ^~: 以指定字符开头匹配
		1) 没有"/"结尾时，location /abc/def可以匹配/abc/defghi请求, 也可以匹配/abc/def/ghi等;
		2) 而有"/"结尾时，location /abc/def/不能匹配/abc/defghi请求, 只能匹配/abc/def/anything这样的请求
	 
	 proxy_pass配置(如下同访问 http://127.0.0.1/proxy/test.html)
		1) location /proxy/ { proxy_pass http://127.0.0.1:81; } , 会被代理到 http://127.0.0.1:81/proxy/test.html ;
		2) location /proxy/ { proxy_pass http://127.0.0.1:81/; } , 会被代理到 http://127.0.0.1:81/test.html ;
		3) location /proxy/ { proxy_pass http://127.0.0.1:81/ftlynx; }, 会被代理到http://127.0.0.1:81/ftlynxtest.html ;
		4) location /proxy/ { proxy_pass http://127.0.0.1:81/ftlynx/; }, 会被代理到 http://127.0.0.1:81/ftlynx/test.html ;
		
	 
	 四层负载与七层负载
		负载: 解决高并发(减轻单台服务器压力), 将所有请求拦截到负载均衡器, 
			再由负载均衡器采用负载算法(轮询、权重、IP绑定)选择执行者;
		
		四层负载: 基于传输层(TCP 协议)实现负载均衡, LVS(软负载)、F5(硬负载)、Nginx-v1.9+;
		七层负载: 基于应用层(HTTP协议)实现负载均衡, Nginx
	 
	 服务器集群常见问题:
		1. 分布式 session 一致性
		2. 分布式 job 幂等性
		3. 分布式生成全局ID
		4. 分布式锁解决
		5. 分布式配置中心
		
	 upstream 配置负载均衡:
		upstream: 配置上游服务器
		backup: 配置备机
		weight: 配置权重
		ip_hash: IP绑定负载均衡
	 
		upstream test {
		  ## 权重
		  #server 127.0.0.1:8080 weight=1;
		  #server 127.0.0.1:8081 weight=3;
		
		  ## 主从
		  #server 127.0.0.1:8080 ;
		  #server 127.0.0.1:8081 backup;
		  
		  ## ip绑定
		  server 127.0.0.1:8080 ;
		  server 127.0.0.1:8081 ;
		  ip_hash;
		}
		server {
			listen       80;
			server_name  localhost;
			location / {
				proxy_pass   http://testproxy;
				proxy_connect_timeout 1s; ### nginx与上游服务器连接超时时间
				proxy_send_timeout 1s; ### nginx发送给上游服务器超时时间
				proxy_read_timeout 1s; ### nginx接受上游服务器超时时间
				index  index.html index.htm;
			}
		}
	
	 Linux 安装:
		wget http://nginx.org/download/nginx-1.9.10.tar.gz
		tar -zxvf nginx-1.9.10.tar.gz
		./configure --prefix=/usr/local/nginx
		make&&make install
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																				2018年8月6日15:19:51
	

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	加密
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 数据加密原因: 保证数据安全, 防止抓包获取明文数据分析、报文篡改; 
	
	 对称加密: 加密、解密 使用同一个密钥; 常用加密方式: DES、3DES、ASE; 使用场景: 服务器端之间通讯;
	 非对称加密: 加解密使用公私钥; 常用加密方式: RSA; 使用场景: 客服端服务器之间通讯;
	 
	 令牌跳转: 跳转网站B需要提供参数, 使用令牌代替, 网站B在服务器端通过令牌获取需要的参数;
	 
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	HTTPS
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 基于HTTP之上对传输数据加密传输, 默认端口: 443; 
	 访问流程:
		1) 客户端(浏览器)发送支持加密协议及版本给服务器, 服务器返回合适的加密协议和公钥证书;
		2) 客户端校验证书有效;
		3) 客户端生成随机密钥, 使用公钥证书加密, 发送给服务器;
		4) 服务器使用私钥证书解密, 获取随机密钥, 使用随机密钥加密数据返回客户端;
		5) 客户端使用随机密钥解密数据成功, SSL加密建立完成;
		6) 客户端与服务器后续通讯使用随机密钥作为对称加密密钥.
		
		+- -  - -+                                                                                                    +- -  - -+
		|        |      — — — — — — — — — — — — — — — — — — 支持的协议及版本 — — — — — — — — — — — — — — — — — >      |        |
		|   客   |                                                                                                    |        |
		|   户   |      < — — — — — — — — — — — — — —  合适的协议及版本和公钥证书  — — — — — — — — — — — — — — —      |        |
		|   端   |                                                                                                    |   服   |
		|        |      — — — — — — — — 校验证书有效性                                                                |        |
		|   ∧   |                                                                                                    |   务   |
		|   浏   |      — — — — — — — — — — — — — —  生成随机密钥、使用公钥证书加密  — — — — — — — — — — — — — >      |        |
		|   览   |                                                                                                    |   器   |
		|   器   |      < — — — — — — — — 使用私钥证书解密、获取随机密钥、使用随机密钥加密数据 — — — — — — — — —      |        |
		|   ∨   |                                                                                                    |        |
		|        |      — — — — — — — — 使用随机密钥解密数据, SSL建立完成                                             |        |
		+- -  - -+                                                                                                    +- -  - -+

		
	 HTTP 与 HTTPS区别: 
		HTTP 默认端口号 80, 数据采用明文传输;
		HTTPS 默认端口号 443, 数据采用加密传输.
		
	 证书配置：参考购买证书网站的证书配置文档
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

	

	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Consul + upsync + Nginx(v1.9+)  动态负载均衡
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Consul: 使用go语言编写的注册中心, 类似于zookeeper、eureka
		Upsync: 新浪开发的一个 Nginx 插件.
		动态负载均衡原理: 搭建 ConsulServer 存放负载均衡配置消息; Nginx 隔时读取 ConsulServer 最新的配置消息.
		
		Linux 
			  安装wget: yum -y install wget
			安装Consul: wget https://releases.hashicorp.com/consul/0.7.5/consul_0.7.5_linux_amd64.zip
				  解压: unzip consul_0.7.5_linux_amd64.zip
				  启动: ./consul agent -dev -ui -node=consul-dev -client=192.168.181.129
		关闭临时防火墙: systemctl stop firewalld
				  界面: http://192.168.181.129:8500
			  注册服务: http://192.168.181.129:8500/v1/catalog/register
				{"Datacenter": "dc1", "Node": "Tomcat", "Address": "192.168.5.1", "Service": {"Id": "192.168.5.1:8080", "Service": "test", "tags": ["dev"], "port": 8080}}
			    添加kv: http://192.168.181.129:8500/v1/kv/upstreams/test/192.168.5.1:8081
		  配置负载均衡: {"weight":2, "max_fails":2,"fail_timeout":10, "down":0}
				
			安装Nginx: wget http://nginx.org/download/nginx-1.9.10.tar.gz
		   安装upsync: wget https://github.com/weibocom/nginx-upsync-module/archive/master.zip
				 解压: unzip master.zip
					   tar -zxvf nginx-1.9.10.tar.gz
		 创建必要目录: groupadd nginx
					   useradd -g nginx -s /sbin/nologin nginx
					   mkdir -p /var/tmp/nginx/client/
					   mkdir -p /usr/local/nginx
			编译Nginx: 
				./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi/ --http-scgi-temp-path=/var/tmp/nginx/scgi/ --with-pcre --add-module=../nginx-upsync-module-master
				make&&make install
				
				解决错误[checking for C compiler ... not found]: 	yum -y install gcc gcc-c++ autoconf automake make
				解决错误[the HTTP rewrite module requires the PCRE library]: 	yum -y install pcre-devel
				解决错误[SSL modules require the OpenSSL library]: 		yum -y install openssl openssl-devel
			
		修改Nginx配置: 
			upstream test{
				server	127.0.0.1:11111;
				### upsync 拉取负载均衡配置的consulServer配置, 拉取地址、拉取超时时间、拉取间隔时间、拉取注册中心类型
				upsync 192.168.181.129:8500/v1/kv/upstreams/test upsync_timeout=6m	upsync_interval=500ms	upsync_type=consul	strong_dependency=off;
				### 动态拉取 consulServer 配置持久化的目录, 需要提前创建/usr/local/nginx/conf/servers目录
				upsync_dump_path	/usr/local/nginx/conf/servers/servers_test.conf;
			}
			server {
				listen       80;
				server_name  localhost;
				location / {
					proxy_pass http://test;
					index  index.html index.htm;
				}
			}
			
			
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		   
		
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Lvs + Keepalived + Nginx 双机主从热备
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		LVS[Linux Virtual Server]: 四层负载均衡器, 针对于传输层的软负载均衡, 可负载: 数据库、WEB服务; 虚拟化技术, 可虚拟VIP IP地址. 
		Keepalived: 在LVS的基础上, 实现心跳检测、监控服务器实现故障转移, 服务宕机可尝试自动重试脚本.+
		Nginx: 七层负载均衡, 针对于应用层的负载均衡(HTTP), Nginx 1.9+ 开始对四层负载均衡支持.
		
		LVS与Nginx: LVS 应用负载均衡场景更广泛, LVS 支持所有服务的负载均衡.
		
		Keepalived安装: wget http://www.keepalived.org/software/keepalived-1.2.18.tar.gz
				  解压: tar -zxvf keepalived-1.2.18.tar.gz
		编译Keepalived: 
			./configure --prefix=/usr/local/keepalived
			make&&make install
			
			解决错误[checking for C compiler ... not found]: 	yum -y install gcc gcc-c++ autoconf automake make
			解决错误[SSL modules require the OpenSSL library]: 		yum -y install openssl openssl-devel
		
		Keepalived安装成Linux服务
			mkdir /etc/keepalived
			cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
			复制启动脚本: 
			cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/
			cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
			ln -s /usr/local/sbin/keepalived /usr/sbin/
			ln -s /usr/local/keepalived/sbin/keepalived/ /sbin/
			
			解决错误[ln: 无法创建符号链接"/sbin/keepalived": 文件已存在]
				rm -f /usr/sbin/keepalived
				cp /usr/local/keepalived/sbin/keepalived /usr/sbin/
				
			启动: service keepalived start  
			停止: service keepalived stop
			
		
		配置keepalived虚拟VIP
			修改 keepalived 配置
			vi /etc/keepalived/keepalived.conf
			
				! Configuration File for keepalived

				vrrp_script chk_nginx {
					script "/etc/keepalived/nginx_check.sh" #运行脚本，脚本内容下面有，就是起到一个nginx宕机以后，自动开启服务
					interval 2 #检测时间间隔
					weight -20 #如果条件成立的话，则权重 -20
				}
				# 定义虚拟路由，VI_1 为虚拟路由的标示符，自己定义名称
				vrrp_instance VI_1 {
					state MASTER #配置主从: MASTER 主,  BACKUP 从
					interface ens33 # 绑定虚拟 IP 的网络接口，根据自己的机器填写
					virtual_router_id 111 # 虚拟路由的 ID 号， 两个节点设置必须一样
					mcast_src_ip 192.168.181.131 #填写本机ip
					priority 100 # 节点优先级,主要比从节点优先级高
					nopreempt # 优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题
					advert_int 1 # 组播信息发送间隔，两个节点设置必须一样，默认 1s
					authentication {
						auth_type PASS
						auth_pass 1111
					}
					# 将 track_script 块加入 instance 配置块
					track_script {
						chk_nginx #执行 Nginx 监控的服务
					}
					### 虚拟IP地址配置规范 假设192.168.212.143 
					virtual_ipaddress {
						192.168.181.110 # 虚拟ip,也就是解决写死程序的ip怎么能切换的ip,也可扩展，用途广泛。可配置多个。
					}
				}
				
			vi /etc/keepalived/nginx_check.sh
				#!/bin/bash
				A=`ps -C nginx –no-header |wc -l`
				if [ $A -eq 0 ];then
					/usr/local/nginx/sbin/nginx
					sleep 2
					if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then
						killall keepalived
					fi
				fi
			
			在 /usr/local/ 安装Nginx;
		
		宕机处理: 故障转移、心跳检测、负载均衡、自动重启
			
		
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月23日16:02:57
		
		
		
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Nginx Upstream 主从热备
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	nginx 配置: 
		upstream testproxy {
		  server 127.0.0.1:8080;
		  server 127.0.0.1:8081;
		  server 127.0.0.1:8082 backup;
		  server 127.0.0.1:8083 backup;
		}

		server {
			listen       80;
			server_name  localhost;

			location / {
				proxy_pass   http://testproxy;
				index  index.html index.htm;
			}
			
			###nginx与上游服务器(真实访问的服务器)超时时间后端服务器连接的超时时间_发起握手等候响应超时时间
			proxy_connect_timeout 1s;
			
			###nginx发送给上游服务器(真实访问的服务器)超时时间
			proxy_send_timeout 1s;
			
			### nginx接受上游服务器(真实访问的服务器)超时时间
			proxy_read_timeout 1s;
		}
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月23日16:11:23
		


	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Nginx + Tomcat 实现动静分离
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		静态资源[ Nginx 静态服务器]: 用户多次访问, 返回不会发生改变;
		动态资源[Tomcat 动态服务器]: 用户多次访问, 返回可能发生改变;
		
		Nginx 动静分离配置: 
			server{
				listen	     80;
				server_name  www.zlj.com;
				location / {
					proxy_pass	http://192.168.181.1:8080;
					index	index.html index.htm;
				}
			}
			server {
				listen       80;
				server_name  static.zlj.com;
				location /static/ {
					root   /usr/;
					index  index.html index.htm;
				}
				location = /50x.html {
					root   html;
				}
			}
		
		浏览器静态资源缓存： 默认缓存7天, 浏览器通过上传文件最后修改时间 与服务器文件最后修改时间比较, 如果服务器修改时间大 http返回 304 告知浏览器使用缓存;
			一般会在状态资源后面加上时间戳.
			
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月25日11:11:50
	
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	云主机搭建 Nginx
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		域名区分:
			一级域名 以www为前缀,  比如: www.tanqingqing.club
			二级域名 以其它为前缀, 比如: static.tanqingqing.club 、520.tanqingqing.club
		
		Nginx 配置: 
			# www 一级域名 反向代理配置
			server{
				listen	     80;
				server_name  www.tanqingqing.club;
				location / {
					proxy_pass	http://127.0.0.1:8080;
					index	index.html index.htm;
				}
			}
			# 520 二级域名 反向代理配置
			server {
				listen       80;
				server_name  520.tanqingqing.club;
				location / {
					proxy_pass	http://127.0.0.1:8081;
					index  index.html index.htm;
				}
				location = /50x.html {
					root   html;
				}
			}
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
																																				2018年7月25日15:10:31
																																				
																																				
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 CDN 内容分发
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		DNS域名解析IP过程:  浏览器缓存  ->  hosts -> 公网DNS解析
		
		优势: 每个客户端都访问距离最近地区的服务器, 避免宽带跨区访问, 提高响应速度;
		
		作用: 提高响应速度, 可对静态资源缓存、对访问用户进行限制; 
		
		CDN访问过程: 客户端 -> CDN缓存 -> 真实访问服务器
		
		配置过程: 先配置CND的域名与真实IP, 再配置域名解析 记录类型配置 CNAME , 记录值配置CDN生成的CNAME .
		
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
																																				2018年8月2日17:22:50
		
		
	
	
	
		
		

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Linux 
	
	使用 win cmd 连接 ssh/sftp 需要安装 openssh for windows 
	也可使用 XShell 或者其它工具
	
	------------------------------------------------------------------------------------------------------------------------
	CentOS卸载原有openJDK
		查看安装的jdk: rpm -qa|grep java
			java-1.8.0-openjdk-headless-1.8.0.171-8.b10.el7_5.x86_64
			java-1.7.0-openjdk-1.7.0.181-2.6.14.8.el7_5.x86_64
			java-1.7.0-openjdk-headless-1.7.0.181-2.6.14.8.el7_5.x86_64
			java-1.8.0-openjdk-1.8.0.171-8.b10.el7_5.x86_64
		删除jdk: rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.171-8.b10.el7_5.x86_64
		
		
	配置JDK环境
		打开环境配置文件: vi /etc/profile 
		在文件末尾添加如下配置: 
			### 配置jdk环境变量
			export JAVA_HOME=/usr/java/jdk-8
			export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
			export PATH=$PATH:$JAVA_HOME/bin
			
			export JAVA_HOME=/usr/local/jdk-11
			export CLASSPATH=$JAVA_HOME/lib
			export PATH=$PATH:$JAVA_HOME/bin
		保存退出文件: :wq
		初始化加载新配置: source /etc/profile
	------------------------------------------------------------------------------------------------------------------------
		
																									2018年7月19日14:56:46
																									
																									
																									
																									
	下载JDK源码
	------------------------------------------------------------------------------------------------------------------------
		安装Python-2.7: yum install python-devel
		安装mercurial: easy_install mercurial
		检测mercurial: hg --version
		克隆源: hg clone http://hg.openjdk.java.net/jdk8u/jdk8u-dev/
		cd jdk8u-dev
		chmod 755 get_source.sh  [注释掉报错的语句]
		获取源码: ./get_source.sh
		构建环境: yum install build-essential gawk m4 openjdk-7-jdk libasound2-dev libcups2-deb freetype-devel libXtst-devel alsa-lib-devel cups-devel libXt-devel libXrender-devel libxrender-dev xorg-dev xutils-dev x11proto-print-dev binutils libmotif3 libmotif-dev ant
		设置环境变量: vi /etc/profile	source /etc/profile
			## 语言设置
			export LANG=C
			## Bootstrap JDK的安装路径
			export ALT_BOOTDIR=/usr/lib/jvm/java-1.7.0
			## 允许自动下载
			export ALLOW_DOWNLOADS=true
			## 并行编译线程数
			export HOTSPOT_BUILD_JOBS=2
			export ALT_PARALLEL_COMPILE_JOBS=2

			export SKIP_COMPARE_IMAGES=true
			export SKIP_PRECOMPILED_HEADER=true

			## 要编译的内容
			export BUILD_LANGTOOLS=true
			export BUILD_HOTSPOT=true
			export BUILD_JDK=true

			export BUILD_DEPLOY=false
			export BUILD_INSTALL=false

			## 编译结果存放的路径
			export ALT_OUTPUTDIR=/usr/local/Java/jdk1.8/Contents/build
		./configure
		make all
		
		
	Java 内存溢出
	------------------------------------------------------------------------------------------------------------------------
		虚拟机栈(本地方法栈一致)内存溢出:
			StackOverflowError: 线程请求的栈深度大于虚拟机允许的深度, 抛出.
			OutOfMemoryError: 虚拟机栈可以动态扩展, 扩展无法申请到足够的内存, 抛出.
		堆内存溢出:
			OutOfMemoryError: 堆中没有内存完成实例分配, 并且堆无法再扩展, 抛出.
		
		

		
		
	------------------------------------------------------------------------------------------------------------------------
		
																									
																									
	安装 Docker
	------------------------------------------------------------------------------------------------------------------------
		安装所需的库: yum install -y yum-utils device-mapper-persistent-data lvm2
		设置Docker安装源: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
		[可选]启动测试库: yum-config-manager --enable docker-ce-test
		[可选]启动docker-ce-edge: yum-config-manager --enable docker-ce-edge
		安装Docker-ce: yum install docker-ce
		查看库中可用版本: yum list docker-ce --showduplicates | sort -r
		从可用版本选择: yum install docker-ce-<VERSION STRING> ;  例如: yum install docker-ce-18.03.1.ce-1.el7.centos
		启动Docker: systemctl start docker
		运行hello-world: docker run hello-world
		
		配置镜像加速: vi  /etc/docker/daemon.json
			添加内容: { "registry-mirrors": ["http://hub-mirror.c.163.com"] }
		
		-----------------------------------------------
		卸载Docker包: 	yum remove docker-ce
						rm -rf /var/lib/docker
		-----------------------------------------------
		 参考: https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites
	------------------------------------------------------------------------------------------------------------------------
	
	常用Docker命令
	------------------------------------------------------------------------------------------------------------------------
		docker search	docker search *						查找镜像
		------------------------------------------------------------------------------------------------------------
		docker pull		docker pull 镜像名称				拉取镜像
		------------------------------------------------------------------------------------------------------------
		docker images										查看安装的镜像
		------------------------------------------------------------------------------------------------------------
		docker run		docker run -d -P 镜像[ID | 名称]	运行镜像	-d: 后台运行、-P: 随机端口 -p[本地端口:容器端口]端口映射到主机、 -v[本地文件:容器文件]文件挂在到容器
		------------------------------------------------------------------------------------------------------------
		docker stop 	docker stop 镜像[ID | 名称]			停止镜像
		------------------------------------------------------------------------------------------------------------
		docker ps 		-a 全部、 -l 最后					查看运行中的容器
		------------------------------------------------------------------------------------------------------------
		docker logs 	docker logs 容器ID | 容器名称		查看日志
						docker logs -f 容器ID | 镜像名称	想tail -f 输出容器内部同步日志
		------------------------------------------------------------------------------------------------------------
		docker rm 		docker rm 容器ID | 容器名称			删除容器
		------------------------------------------------------------------------------------------------------------
		docker rmi		docker rmi 镜像ID | 镜像名称		删除镜像
		------------------------------------------------------------------------------------------------------------
	
	 Docker镜像
	------------------------------------------------------------------------------------------------------------------------
		安装 Nginx
			查找nginx镜像: docker search nginx
			拉取nginx镜像: docker pull nginx
			查看本地nginx镜像: docker images | grep 'nginx'
			创建存放nginx配置目录: mkdir -p /usr/docker/myNginx
			创建nginx.conf 并编写配置
			配置并启动 nginx: docker run -d -p 80:80[需与nginx配置一致] --name myNginx -v /usr/docker/myNginx/nginx.conf:/etc/nginx/nginx.conf nginx  
			查看nginx日志: docker logs myNginx
	
	------------------------------------------------------------------------------------------------------------------------
	

	 安装 Nginx
	 ------------------------------------------------------------------------------------------------------------------------
		下载Nginx: wget http://nginx.org/download/nginx-1.9.10.tar.gz
		
		解压安装文件: tar -zxvf nginx-1.9.10.tar.gz
		
		配置: ./configure --prefix=/usr/local/nginx
				--with-http_ssl_module  ## 添加 ssl 模块
		
		编译: make&&make install
	------------------------------------------------------------------------------------------------------------------------
	
	
	 安装 MySql
	------------------------------------------------------------------------------------------------------------------------	
		官网下载 Mysql  : https://dev.mysql.com/downloads/
		
		解压安装文件: tar -zxvf mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz -C /usr/local
		
		修改目录名称: mv mysql-5.7.23-linux-glibc2.12-x86_64 mysql
		
		添加配置文件: vi /etc/my.cnf  (可从MySQL5.7.18前的版本copy 一个my.cnf)
		
		创建用户: useradd mysql 	passwd mysql
		
		更改mysql目录拥有者: chown -R mysql:mysql /usr/local/mysql/
		
		初始化 mysql: /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data

			出现错误查看error.log :  cat /usr/local/mysql/data/error.log
			看错误原因解决.
		
		免密启动mysql: /usr/local/mysql/bin/mysqld_safe --skip-grant-tables --user=mysql &
		
		登录MySQL: /usr/local/mysql/bin/mysql -u root
		
		修改root用户密码(MySQL 8.04前): 
			update user set authentication_string=PASSWORD('新密码') where User='root';
			update user set host='%' where User='root'; //设置可远程访问
			flush privileges;
			exit;
		修改root用户密码(MySQL 8.04): 
			update user set authentication_string='' where User='root';
			ALTER user 'root'@'localhost' IDENTIFIED BY '新密码';
			ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码'; //设置native连接密码
			flush privileges;
			exit;
			
		关闭MySQL: kill -9 PID
		
		正常启动MySQL: /usr/local/mysql/bin/mysqld_safe --user=mysql &
		
		-------------------------------------------------------------------------------------------------------------------
		
		设置开机自启
			cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql
			
			vi /etc/init.d/mysql
			
			修改 MySQL 目录和数据目录: 
				basedir=/usr/local/mysql
				datadir=/usr/local/mysql/data
				
			完成后可以使用:
				/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}
				
	------------------------------------------------------------------------------------------------------------------------
																							
																							2018年8月1日15:10:57
																							
																							
	 MySql主从配置 【未成功操作】
	------------------------------------------------------------------------------------------------------------------------
	  主mysql my.cnf 添加配置
		server_id = 166
		log-bin=mysql-bin
	  重启主Mysql服务
	  查询server_id: show variables like 'server_id'
	  查询主服务状态: show master status;
	  
	  从mysql my.cnf 添加配置
		server_id = 167
		log-bin=mysql-bin
		binlog_do_db=test ## 同步的数据
		
	  主mysql添加同步的访问账号: grant replication slave on *.* to 'mysync'@'%' identified by 'q123456'
	  从mysql配置同步访问: 
		stop slave;
		change master to master_host='192.168.181.136', master_user='mysync', master_password='q123456',master_log_file='mysql-bin.000017', master_log_pos=4586;
		start slave;
	
	  检查从服务器复制状态:  show slave status;
	
	
	
	sftp命令:
	------------------------------------------------------------------------------------------------------------------------
		bye/quit/exit     	finish your SFTP session								完成 SFTP 会话
	------------------------------------------------------------------------------------------------------------------------
		cd      			change your remote working directory					改变远程机的工作目录
	------------------------------------------------------------------------------------------------------------------------
		clear   			clear screen											清空屏幕内容
	------------------------------------------------------------------------------------------------------------------------
		explore 			explore your local directory							浏览本地目录
	------------------------------------------------------------------------------------------------------------------------
		get     			download a file from the server to your local machine	将文件从远程机下载到本地计算机
	------------------------------------------------------------------------------------------------------------------------
		help    			give help												获取帮助
	------------------------------------------------------------------------------------------------------------------------
		lcd     			change and/or print local working directory				改变本地计算机的工作目录
	------------------------------------------------------------------------------------------------------------------------
		lls     			list contents of a local directory						列出本地目录的内容
	------------------------------------------------------------------------------------------------------------------------
		lpwd    			print your local working directory						显示本地工作目录路径
	------------------------------------------------------------------------------------------------------------------------
		ls      			list contents of a remote directory						列出远程机目录的内容
	------------------------------------------------------------------------------------------------------------------------
		mkdir   			create a directory on the remote server					在远程机创建一个目录
	------------------------------------------------------------------------------------------------------------------------
		mv/rename 			move or rename a file on the remote server				在远程机移动/重命名一个文件
	------------------------------------------------------------------------------------------------------------------------
		put     			upload a file from your local machine to the server		将一个文件从本地计算机上传到远程机
	------------------------------------------------------------------------------------------------------------------------
		pwd     			print your remote working directory						显示远程机工作目录路径
	------------------------------------------------------------------------------------------------------------------------
		rm      			delete a file											删除一个文件
	------------------------------------------------------------------------------------------------------------------------
		rmdir   			remove a directory on the remote server					在远程机删除一个目录
	------------------------------------------------------------------------------------------------------------------------

																							2018年7月18日17:12:12
																							
																							
																							
																							
	ssh 命令:
	------------------------------------------------------------------------------------------------------------------------
		systemctl stop firewalld													关闭临时防火墙
	------------------------------------------------------------------------------------------------------------------------
		systemctl disable firewalld													禁止防火墙开机自启
	------------------------------------------------------------------------------------------------------------------------
		ssh							ssh root@host[主机]								连接远程机																
	------------------------------------------------------------------------------------------------------------------------
		sftp						sftp root@host[主机]							传输文件到远程机
	------------------------------------------------------------------------------------------------------------------------
		useradd						useradd weblogic[用户名]						添加用户
	------------------------------------------------------------------------------------------------------------------------
		passwd						passwd weblogic[用户名]							修改密码
	------------------------------------------------------------------------------------------------------------------------
		chown						chown -R web[用户名] /root/web[目录]			授权目录
	------------------------------------------------------------------------------------------------------------------------
	
		free						free -m[单位: 兆]								查看内存使用
	------------------------------------------------------------------------------------------------------------------------
		reboot																		重启系统
	------------------------------------------------------------------------------------------------------------------------
		find						find / -name "my*"								查找 / 目录下所有已my开头的文件
									find . -name "mysql*" -exec rm -rf {} \;		查找所有mysql相关的文件全部删除
	------------------------------------------------------------------------------------------------------------------------
		tar					tar -zxvf *.tar.gz  | tar -xvf *.tar					解压tar包
	------------------------------------------------------------------------------------------------------------------------
		xz							xz -d *.xz										解压xz包
	------------------------------------------------------------------------------------------------------------------------
		rpm -qa						rpm -qa | grep mysql[应用名]					查找安装应用
	------------------------------------------------------------------------------------------------------------------------
		rpm -e						rpm -e [查找安装应用返回的名称]					卸载应用
	------------------------------------------------------------------------------------------------------------------------
	

	
	
	
	安装插件: 
	------------------------------------------------------------------------------------------------------------------------------------------------------
		命令																		解决错误
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install wget															安装下载文件命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install unzip														安装解压 zip命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install zip															安装压缩 zip命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install gcc gcc-c++ autoconf automake make							checking for C compiler ... not found
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install pcre-devel													the HTTP rewrite module requires the PCRE library
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install openssl openssl-devel										SSL modules require the OpenSSL library
	------------------------------------------------------------------------------------------------------------------------------------------------------
																															2018年7月24日14:57:50