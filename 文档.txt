计算机进制

一、 二进制转十进制
    首先对二进制进行补位， 然后看其首位， 若首位是 "0" 表示为正数， 反之首位是 "1" 表示为负数;

    1 ) 正整数转换

       算法: n位的二进制, 从右往左开始计算，第一位 * 2^0 + 第二位 * 2^1 + 第三位 * 2^2 + ... + 第n位 * 2^(n-1) ;

        示例: 将一个八位的二进制 1011000 转换为十进制

	补位  0101 1000
	-------------------------------------------------------------------
	            0       1      0      1     1     0     0     0
	-------------------------------------------------------------------
	换算	   2^7     2^6    2^5    2^4   2^3   2^2   2^1   2^0
	-------------------------------------------------------------------
	计算	  0*128 + 1*64 + 0*32 + 1*16 + 1*8 + 0*4 + 0*2 + 0*1
	-------------------------------------------------------------------
	结果	  0 + 64 + 0 + 16 + 8 = 88
    2）负整数转换

        算法: 先补位，再对二进制进行取反加一, 然后再做正整数换算;

        示例: 将八位的二进制 10111110 转换为十进制

	  补位  1011 1110
	--------------------------------------------------------------------
	            1       0      1      1     1     1     1     0
	--------------------------------------------------------------------
	取反        0       1      0      0     0     0     0     1
	--------------------------------------------------------------------
	加一        0       1      0      0     0     0     1     0
	--------------------------------------------------------------------
	换算	   2^7     2^6    2^5    2^4   2^3   2^2   2^1   2^0
	--------------------------------------------------------------------
	计算	  0*128 + 1*64 + 0*32 + 0*16 + 0*8 + 0*4 + 1*2 + 0*1
	--------------------------------------------------------------------
	结果	  0 + 64 + 0 + 0 + 0 + 0 + 2 + 0 = 66
	--------------------------------------------------------------------
	首位为1 结果取反  =====> -66

 
二、 十进制转二进制
    首先看数值正负, 若正数决定首位为 "0" , 反之负数决定首位为 "1";

    1 ) 正整数转换

    算法: 对数值除2取余, 将商递归除2操作, 再将余数顺序取反, 得到二进制值;

    示例: 将十进制 66 转换为八位二进制

	除        66/2     33/2     16/2     8/2     4/2     2/2     1/2     0
	--------------------------------------------------------------------------
	取余            0        1        0       0       0       0       1
 	--------------------------------------------------------------------------
	顺序取反    1 0 0 0 0 1 0
	--------------------------------------------------------------------------
	结果    0100 0010

    2)负整数转换

    算法: 先做正整数换算, 然后对结果进行取反加一;

    示例: 将十进制 -88 转换为八位二进制

	除        88/2     44/2     22/2     11/2     5/2     2/2     1/2     0
	--------------------------------------------------------------------------
	取余            0        0        0       1       1       0       1
 	--------------------------------------------------------------------------
	顺序取反    1 0 1 1 0 0 0
	--------------------------------------------------------------------------
	补位      0 1 0 1 1 0 0 0
	--------------------------------------------------------------------------
	取反      1 0 1 0 0 1 1 1
	--------------------------------------------------------------------------
	加一      1 0 1 0 1 0 0 0
	--------------------------------------------------------------------------
	结果	1010 1000
	
	

	
位移

 <<
 >>
 >>>
 |
 &
 ^
	
	
	
	
	
	
	
	
	

计算机网络


IP
	+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
	|	IPv4(Internet Protocol Version 4) 网络协议第4版																											|
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|           |           地址区间          |                          区分                         |                保留地址                 |    使用群体   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  A类地址  |  1.0.0.1-126.155.255.254    |  1[00000001] - 126[0111111] 第一个字节固定0开头       |  10.X.X.X、127.X.X.X                    |  政府(公用)   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  B类地址  |  128.0.0.1-191.255.255.254  |  128[10000000] - 191[10111111] 第一个字节固定10开头   |  172.16.X.X - 172.31.X.X、169.254.X.X   |  企业(商用)   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  C类地址  |  192.0.0.1-223.255.255.254  |  192[11000000] - 223[11011111] 第一个字节固定110开头  |  192.168.X.X                            |  个人(民用)   |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  D类地址  |  224.0.0.1-239.255.255.254  |  224[11100000] - 239[11101111] 第一个字节固定1110开头 |                                         |  组播(中转站) |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	|  E类地址  |  240.0.0.1-255.255.255.254  |  240[11110000] - 255[11111111] 第一个字节固定1111开头 |                                         |  实验         |
	+ - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - +
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Java中间件


	Tomcat
	架构 : 	一个Tomcat 中包含 一个Server; 
			一个Server 中包含 一组Service;
			一个Service 中包含 一个Engine 和一组Connector;
			一个Engine 中包含一组Host;
			一个Host 中包含一组Context;
			一个Context 中包含一组Wrapper;
			一个Wrapper 对应一个Servlet;
			一个Context 对应一个war 工程;
			
			
			
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Hystrix
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		微服务中的服务保护框架, 在分布式中的容错框架.
		服务雪崩效应: 当一个服务受到高并发的请求,  服务器承受不了的情况下 `产生服务堆积, 导致其它服务不可用.
		
		作用: 服务保护(保护服务请求堆积, 避免服务瘫痪), 
		解决方案: 
			隔离[目的: 不同服务,互不影响; 方案: 线程池(每个服务独立线程池,CPU内存开销大)、信号量(限制服务同时访问量)];
			降级[目的: 服务不可用,减少等待, 返回友好提示, 提高用户体验; ];
			熔断[目的: 服务达到最大承受能力, 拒绝访问服务, 调用服务降级的方法; 与降级一起使用].
			限流[目的：保护服务; 方案: 计数器、令牌桶、漏桶、Nginx]
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	


	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	高并发限流
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
		计数器方式:  定义一个原子类, 针对某个服务做访问次数记录, 一旦达到设定阈值, 走服务降级;
		
			计数器临界问题:
			
				例如: 限制服务每60秒内只能接受10个请求, 超过10个请求拒绝访问服务 10R/m
			
										 5R          5R↑
				|-------------------------|-----|-----|-------------------------|
				0s						 50s   60s   70s					  120s
		
			滑动窗口计数器: 创建独立格子, 每个格子都是独立的计数器;
			令牌桶算法: 1. 固定速率往桶中存入令牌; 2.客户端想访问, 需先从桶中获取令牌. 可用guava
			
	
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	


	
			
			
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Consul + upsync + Nginx(v1.9+)  动态负载均衡
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Consul: 使用go语言编写的注册中心, 类似于zookeeper、eureka
		Upsync: 新浪开发的一个 Nginx 插件.
		动态负载均衡原理: 搭建 ConsulServer 存放负载均衡配置消息; Nginx 隔时读取 ConsulServer 最新的配置消息.
		
		Linux 
			  安装wget: yum -y install wget
			安装Consul: wget https://releases.hashicorp.com/consul/0.7.5/consul_0.7.5_linux_amd64.zip
				  解压: unzip consul_0.7.5_linux_amd64.zip
				  启动: ./consul agent -dev -ui -node=consul-dev -client=192.168.181.129
		关闭临时防火墙: systemctl stop firewalld
				  界面: http://192.168.181.129:8500
			  注册服务: http://192.168.181.129:8500/v1/catalog/register
				{"Datacenter": "dc1", "Node": "Tomcat", "Address": "192.168.5.1", "Service": {"Id": "192.168.5.1:8080", "Service": "test", "tags": ["dev"], "port": 8080}}
			    添加kv: http://192.168.181.129:8500/v1/kv/upstreams/test/192.168.5.1:8081
		  配置负载均衡: {"weight":2, "max_fails":2,"fail_timeout":10, "down":0}
				
			安装Nginx: wget http://nginx.org/download/nginx-1.9.10.tar.gz
		   安装upsync: wget https://github.com/weibocom/nginx-upsync-module/archive/master.zip
				 解压: unzip master.zip
					   tar -zxvf nginx-1.9.10.tar.gz
		 创建必要目录: groupadd nginx
					   useradd -g nginx -s /sbin/nologin nginx
					   mkdir -p /var/tmp/nginx/client/
					   mkdir -p /usr/local/nginx
			编译Nginx: 
				./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi/ --http-scgi-temp-path=/var/tmp/nginx/scgi/ --with-pcre --add-module=../nginx-upsync-module-master
				make&&make install
				
				解决错误[checking for C compiler ... not found]: 	yum -y install gcc gcc-c++ autoconf automake make
				解决错误[the HTTP rewrite module requires the PCRE library]: 	yum -y install pcre-devel
				解决错误[SSL modules require the OpenSSL library]: 		yum -y install openssl openssl-devel
			
		修改Nginx配置: 
			upstream test{
				server	127.0.0.1:11111;
				### upsync 拉取负载均衡配置的consulServer配置, 拉取地址、拉取超时时间、拉取间隔时间、拉取注册中心类型
				upsync 192.168.181.129:8500/v1/kv/upstreams/test upsync_timeout=6m	upsync_interval=500ms	upsync_type=consul	strong_dependency=off;
				### 动态拉取 consulServer 配置持久化的目录, 需要提前创建/usr/local/nginx/conf/servers目录
				upsync_dump_path	/usr/local/nginx/conf/servers/servers_test.conf;
			}
			server {
				listen       80;
				server_name  localhost;
				location / {
					proxy_pass http://test;
					index  index.html index.htm;
				}
			}
			
			
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		   
		
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Lvs + Keepalived + Nginx 双机主从热备
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		LVS[Linux Virtual Server]: 四层负载均衡器, 针对于传输层的软负载均衡, 可负载: 数据库、WEB服务; 虚拟化技术, 可虚拟VIP IP地址. 
		Keepalived: 在LVS的基础上, 实现心跳检测、监控服务器实现故障转移, 服务宕机可尝试自动重试脚本.+
		Nginx: 七层负载均衡, 针对于应用层的负载均衡(HTTP), Nginx 1.9+ 开始对四层负载均衡支持.
		
		LVS与Nginx: LVS 应用负载均衡场景更广泛, LVS 支持所有服务的负载均衡.
		
		Keepalived安装: wget http://www.keepalived.org/software/keepalived-1.2.18.tar.gz
				  解压: tar -zxvf keepalived-1.2.18.tar.gz
		编译Keepalived: 
			./configure --prefix=/usr/local/keepalived
			make&&make install
			
			解决错误[checking for C compiler ... not found]: 	yum -y install gcc gcc-c++ autoconf automake make
			解决错误[SSL modules require the OpenSSL library]: 		yum -y install openssl openssl-devel
		
		Keepalived安装成Linux服务
			mkdir /etc/keepalived
			cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
			复制启动脚本: 
			cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/
			cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
			ln -s /usr/local/sbin/keepalived /usr/sbin/
			ln -s /usr/local/keepalived/sbin/keepalived/ /sbin/
			
			解决错误[ln: 无法创建符号链接"/sbin/keepalived": 文件已存在]
				rm -f /usr/sbin/keepalived
				cp /usr/local/keepalived/sbin/keepalived /usr/sbin/
				
			启动: service keepalived start  
			停止: service keepalived stop
			
		
		配置keepalived虚拟VIP
			修改 keepalived 配置
			vi /etc/keepalived/keepalived.conf
			
				! Configuration File for keepalived

				vrrp_script chk_nginx {
					script "/etc/keepalived/nginx_check.sh" #运行脚本，脚本内容下面有，就是起到一个nginx宕机以后，自动开启服务
					interval 2 #检测时间间隔
					weight -20 #如果条件成立的话，则权重 -20
				}
				# 定义虚拟路由，VI_1 为虚拟路由的标示符，自己定义名称
				vrrp_instance VI_1 {
					state MASTER #配置主从: MASTER 主,  BACKUP 从
					interface ens33 # 绑定虚拟 IP 的网络接口，根据自己的机器填写
					virtual_router_id 111 # 虚拟路由的 ID 号， 两个节点设置必须一样
					mcast_src_ip 192.168.181.131 #填写本机ip
					priority 100 # 节点优先级,主要比从节点优先级高
					nopreempt # 优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题
					advert_int 1 # 组播信息发送间隔，两个节点设置必须一样，默认 1s
					authentication {
						auth_type PASS
						auth_pass 1111
					}
					# 将 track_script 块加入 instance 配置块
					track_script {
						chk_nginx #执行 Nginx 监控的服务
					}
					### 虚拟IP地址配置规范 假设192.168.212.143 
					virtual_ipaddress {
						192.168.181.110 # 虚拟ip,也就是解决写死程序的ip怎么能切换的ip,也可扩展，用途广泛。可配置多个。
					}
				}
				
			vi /etc/keepalived/nginx_check.sh
				#!/bin/bash
				A=`ps -C nginx –no-header |wc -l`
				if [ $A -eq 0 ];then
					/usr/local/nginx/sbin/nginx
					sleep 2
					if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then
						killall keepalived
					fi
				fi
			
			在 /usr/local/ 安装Nginx;
		
		宕机处理: 故障转移、心跳检测、负载均衡、自动重启
			
		
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月23日16:02:57
		
		
		
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Nginx Upstream 主从热备
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	nginx 配置: 
		upstream testproxy {
		  server 127.0.0.1:8080;
		  server 127.0.0.1:8081;
		  server 127.0.0.1:8082 backup;
		  server 127.0.0.1:8083 backup;
		}

		server {
			listen       80;
			server_name  localhost;

			location / {
				proxy_pass   http://testproxy;
				index  index.html index.htm;
			}
			
			###nginx与上游服务器(真实访问的服务器)超时时间后端服务器连接的超时时间_发起握手等候响应超时时间
			proxy_connect_timeout 1s;
			
			###nginx发送给上游服务器(真实访问的服务器)超时时间
			proxy_send_timeout 1s;
			
			### nginx接受上游服务器(真实访问的服务器)超时时间
			proxy_read_timeout 1s;
		}
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月23日16:11:23
		


	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Nginx + Tomcat 实现动静分离
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		静态资源[ Nginx 静态服务器]: 用户多次访问, 返回不会发生改变;
		动态资源[Tomcat 动态服务器]: 用户多次访问, 返回可能发生改变;
		
		Nginx 动静分离配置: 
			server{
				listen	     80;
				server_name  www.zlj.com;
				location / {
					proxy_pass	http://192.168.181.1:8080;
					index	index.html index.htm;
				}
			}
			server {
				listen       80;
				server_name  static.zlj.com;
				location /static/ {
					root   /usr/;
					index  index.html index.htm;
				}
				location = /50x.html {
					root   html;
				}
			}
		
		浏览器静态资源缓存： 默认缓存7天, 浏览器通过上传文件最后修改时间 与服务器文件最后修改时间比较, 如果服务器修改时间大 http返回 304 告知浏览器使用缓存;
			一般会在状态资源后面加上时间戳.
			
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月25日11:11:50
	
	
	
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	云主机搭建 Nginx
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		域名区分:
			一级域名 以www为前缀,  比如: www.tanqingqing.club
			二级域名 以其它为前缀, 比如: static.tanqingqing.club 、520.tanqingqing.club
		
		Nginx 配置: 
			# www 一级域名 反向代理配置
			server{
				listen	     80;
				server_name  www.tanqingqing.club;
				location / {
					proxy_pass	http://127.0.0.1:8080;
					index	index.html index.htm;
				}
			}
			# 520 二级域名 反向代理配置
			server {
				listen       80;
				server_name  520.tanqingqing.club;
				location / {
					proxy_pass	http://127.0.0.1:8081;
					index  index.html index.htm;
				}
				location = /50x.html {
					root   html;
				}
			}
	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																					2018年7月25日15:10:31
	
	
	
	
		
		

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Linux 
	
	使用 win cmd 连接 ssh/sftp 需要安装 openssh for windows 
	也可使用 XShell 或者其它工具
	
	------------------------------------------------------------------------------------------------------------------------
	CentOS卸载原有openJDK
		查看安装的jdk: rpm -qa|grep java
			java-1.8.0-openjdk-headless-1.8.0.171-8.b10.el7_5.x86_64
			java-1.7.0-openjdk-1.7.0.181-2.6.14.8.el7_5.x86_64
			java-1.7.0-openjdk-headless-1.7.0.181-2.6.14.8.el7_5.x86_64
			java-1.8.0-openjdk-1.8.0.171-8.b10.el7_5.x86_64
		删除jdk: rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.171-8.b10.el7_5.x86_64
		
		
	配置JDK环境
		打开环境配置文件: vi /etc/profile 
		在文件末尾添加如下配置: 
			### 配置jdk环境变量
			export JAVA_HOME=/usr/java/jdk-10.0.2
			export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
			export PATH=$PATH:$JAVA_HOME/bin
		保存退出文件: :wq
		初始化加载新配置: source /etc/profile
	------------------------------------------------------------------------------------------------------------------------
		
																									2018年7月19日14:56:46
	

	 安装 MySql
	------------------------------------------------------------------------------------------------------------------------	
		官网下载 Mysql  : https://dev.mysql.com/downloads/
		
		解压安装文件: tar -zxvf mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz -C /usr/local
		
		修改目录名称: mv mysql-5.7.23-linux-glibc2.12-x86_64 mysql
		
		添加配置文件: vi /etc/my.cnf  (可从MySQL5.7.18前的版本copy 一个my.cnf)
		
		创建用户: useradd mysql 	passwd mysql
		
		更改mysql目录拥有者: chown -R mysql:mysql /usr/local/mysql/
		
		初始化 mysql: /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
		
			出现错误查看error.log :  cat /usr/local/mysql/data/error.log
			看错误原因解决.
		
		免密启动mysql: /usr/local/mysql/bin/mysqld_safe --skip-grant-tables --user=mysql &
		
		登录MySQL: /usr/local/mysql/bin/mysql -u root
		
		修改root用户密码: 
			update user set authentication_string=PASSWORD('新密码') where User='root';
			update user set host='%' where User='root'; //设置可远程访问
			flush privileges;
			exit;
			
		关闭MySQL: kill -9 PID
		
		正常启动MySQL: /usr/local/mysql/bin/mysqld_safe --user=mysql &
		
		-------------------------------------------------------------------------------------------------------------------
		
		设置开机自启
			cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql
			
			vi /etc/init.d/mysql
			
			修改 MySQL 目录和数据目录: 
				basedir=/usr/local/mysql
				datadir=/usr/local/mysql/data
				
			完成后可以使用:
				/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}
				
	------------------------------------------------------------------------------------------------------------------------
																							
																							2018年8月1日15:10:57
	
	
	
	sftp命令:
	------------------------------------------------------------------------------------------------------------------------
		bye/quit/exit     	finish your SFTP session								完成 SFTP 会话
	------------------------------------------------------------------------------------------------------------------------
		cd      			change your remote working directory					改变远程机的工作目录
	------------------------------------------------------------------------------------------------------------------------
		clear   			clear screen											清空屏幕内容
	------------------------------------------------------------------------------------------------------------------------
		explore 			explore your local directory							浏览本地目录
	------------------------------------------------------------------------------------------------------------------------
		get     			download a file from the server to your local machine	将文件从远程机下载到本地计算机
	------------------------------------------------------------------------------------------------------------------------
		help    			give help												获取帮助
	------------------------------------------------------------------------------------------------------------------------
		lcd     			change and/or print local working directory				改变本地计算机的工作目录
	------------------------------------------------------------------------------------------------------------------------
		lls     			list contents of a local directory						列出本地目录的内容
	------------------------------------------------------------------------------------------------------------------------
		lpwd    			print your local working directory						显示本地工作目录路径
	------------------------------------------------------------------------------------------------------------------------
		ls      			list contents of a remote directory						列出远程机目录的内容
	------------------------------------------------------------------------------------------------------------------------
		mkdir   			create a directory on the remote server					在远程机创建一个目录
	------------------------------------------------------------------------------------------------------------------------
		mv/rename 			move or rename a file on the remote server				在远程机移动/重命名一个文件
	------------------------------------------------------------------------------------------------------------------------
		put     			upload a file from your local machine to the server		将一个文件从本地计算机上传到远程机
	------------------------------------------------------------------------------------------------------------------------
		pwd     			print your remote working directory						显示远程机工作目录路径
	------------------------------------------------------------------------------------------------------------------------
		rm      			delete a file											删除一个文件
	------------------------------------------------------------------------------------------------------------------------
		rmdir   			remove a directory on the remote server					在远程机删除一个目录
	------------------------------------------------------------------------------------------------------------------------

																							2018年7月18日17:12:12
																							
																							
																							
																							
	ssh 命令:
	------------------------------------------------------------------------------------------------------------------------
		systemctl stop firewalld													关闭临时防火墙
	------------------------------------------------------------------------------------------------------------------------
		ssh							ssh root@host[主机]								连接远程机																
	------------------------------------------------------------------------------------------------------------------------
		sftp						sftp root@host[主机]							传输文件到远程机
	------------------------------------------------------------------------------------------------------------------------
		useradd						useradd weblogic[用户名]						添加用户
	------------------------------------------------------------------------------------------------------------------------
		passwd						passwd weblogic[用户名]							修改密码
	------------------------------------------------------------------------------------------------------------------------
		chown						chown -R web[用户名] /root/web[目录]			授权目录
	------------------------------------------------------------------------------------------------------------------------
	
		free						free -m[单位: 兆]								查看内存使用
	------------------------------------------------------------------------------------------------------------------------
		reboot																		重启系统
	------------------------------------------------------------------------------------------------------------------------
		find						find / -name "my*"								查找 / 目录下所有已my开头的文件
									find . -name "mysql*" -exec rm -rf {} \;		查找所有mysql相关的文件全部删除
	------------------------------------------------------------------------------------------------------------------------
		tar					tar -zxvf *.tar.gz  | tar -xvf *.tar					解压tar包
	------------------------------------------------------------------------------------------------------------------------
		xz							xz -d *.xz										解压xz包
	------------------------------------------------------------------------------------------------------------------------
		rpm -qa						rpm -qa | grep mysql[应用名]					查找安装应用
	------------------------------------------------------------------------------------------------------------------------
		rpm -e						rpm -e [查找安装应用返回的名称]					卸载应用
	------------------------------------------------------------------------------------------------------------------------
	

	
	
	
	安装插件: 
	------------------------------------------------------------------------------------------------------------------------------------------------------
		命令																		解决错误
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install wget															安装下载文件命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install unzip														安装解压 zip命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install zip															安装压缩 zip命令
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install gcc gcc-c++ autoconf automake make							checking for C compiler ... not found
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install pcre-devel													the HTTP rewrite module requires the PCRE library
	------------------------------------------------------------------------------------------------------------------------------------------------------
		yum -y install openssl openssl-devel										SSL modules require the OpenSSL library
	------------------------------------------------------------------------------------------------------------------------------------------------------
																															2018年7月24日14:57:50